default:
  before_script:
    # The annotated tags are fetched from upstream here for autotools to be able
    # generate version.
    - git remote add upstream https://github.com/ClusterLabs/pcs-web-ui.git
    - git fetch upstream
    - export MAX_LOG_SIZE=52428800

.parallel:
  parallel:
    matrix:
      - COMPOSE_ALIAS: "PcsRhel10Next"
        BASE_IMAGE_NAME: "PcsWebUiRhel10Next"
        PCS_BRANCH: "main"
        OS_TAG: "centos10"
  rules:
    - if: $OS_TAG != ""
      variables:
        PCS_ARTIFACTS_URL: "${CI_API_V4_URL}/projects/pcs%2Fpcs/jobs/artifacts/${PCS_BRANCH}/download?job=rpm_build%3A%20%5B${COMPOSE_ALIAS}%2C%20${OS_TAG}%5D"
    - if: $OS_TAG == ""
      variables:
        PCS_ARTIFACTS_URL: "${CI_API_V4_URL}/projects/pcs%2Fpcs/jobs/artifacts/${PCS_BRANCH}/download?job=rpm_build%3A%20%5B${COMPOSE_ALIAS}%5D"

stages:
  - stage1
  - stage2

# avoid running duplicate pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

.essential_preparation: &essential_preparation
  - dnf install -y nodejs
  - ./autogen.sh
  - ./configure

.install_artifacts_rpms: &install_artifacts_rpms
  # Create pcs-web-ui rpm installable to pcsd
  # Unlike in pcs, there is no CI_BRANCH environment variable. In pcs,
  # CI_BRANCH helps a user to differentiate between rpm for e.g. fedora and
  # RHEL. Webui is running inside a browser and currently does not matter what
  # OS is used.
  - >
      curl \
        --fail-with-body \
        --location \
        --insecure \
        --output artifacts.zip \
        --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        "${PCS_ARTIFACTS_URL}"
  - unzip artifacts.zip
  # in rpms/, there can be already also rpm of pcs-web-ui
  - dnf install -y rpms/*.rpm
  - rm -rf rpms/ artifacts.zip

prevent_dev_mistakes:
  # checks for potential issues:
  # * no nexus proxy in resoulved urls in package-lock.json files
  # * lint/format issues
  extends: .parallel
  stage: stage1
  script:
    - *essential_preparation
    - npm ci
    - make prevent_dev_mistakes

distcheck:
  extends: .parallel
  stage: stage1
  script:
    - *essential_preparation
    - make distcheck
    - rename --verbose .tar. ".${BASE_IMAGE_NAME}.tar." pcs-web-ui*.tar.*
    - mkdir -p dist && cp -v pcs-web-ui*.tar.* dist/
  artifacts:
    paths:
      - npm_logs_distcheck/
    exclude:
      - node_modules/
      - .npmrc
    expire_in: 1 week
    # expire_in: 1 week
    # paths:
    #   - dist
#
rpm_build:
  extends: .parallel
  stage: stage1
  script:
    - *install_artifacts_rpms
    - *essential_preparation
    - dnf install -y rpm-build
    # - make init_nexus NEXUS_CERT_PATH="${NEXUS_CERT_PATH}"
    - make rpm/pcs-web-ui.spec
    - dnf builddep -y rpm/pcs-web-ui.spec
    - make rpm
    - mkdir -p rpms
    - cp -v $(find rpm  -type f -name '*.rpm' -not -name '*.src.rpm') rpms/
  artifacts:
    expire_in: 1 week
    paths:
      - rpms

.pcsd_integration_test: &pcsd_integration_test
  - *install_artifacts_rpms
  - *essential_preparation
  #
  # install playwright dependencies
  - dnf install -y
    alsa-lib
    atk
    at-spi2-atk
    at-spi2-core
    cairo
    cups-libs
    libdrm
    libwayland-client
    libX11
    libxcb
    libXcomposite
    libXdamage
    libXext
    libXfixes
    libxkbcommon
    libXrandr
    mesa-libgbm
    pango
  #
  # install other dependencies
  - dnf install -y fence-agents-all
  #
  # prepare environment for test (all)
  # - make init_nexus NEXUS_CERT_PATH="${NEXUS_CERT_PATH}"
  - make test-modules-prepare
  - export PCSD_PROTOCOL_1=https
  - export PCSD_HOST_1=localhost
  - export PCSD_NODE_1=wuitest
  - export PCSD_USERNAME_1="hacluster"
  - export PCSD_PASSWORD_1=hh
  - export PCS_WUI_TESTS_HEADLESS=true
  - export PCS_WUI_TESTS_VIDEO_DIR=.test-records
  - export PCS_WUI_TEST_TIMEOUT=1000000
  - systemctl enable pcsd --now
  # hacluster user should already exists
  - echo "$PCSD_PASSWORD_1" | passwd "$PCSD_USERNAME_1" --stdin
  # tests expects that pcs is authenticated against the node
  - echo "127.0.0.1 $PCSD_NODE_1" >> /etc/hosts
  - pcs host auth "$PCSD_NODE_1" -u "$PCSD_USERNAME_1" -p "$PCSD_PASSWORD_1"
  - mkdir "$PCS_WUI_TESTS_VIDEO_DIR"
  - ln /var/log/pcsd/pcsd.log "$PCS_WUI_TESTS_VIDEO_DIR/pcsd.log"

pcsd_integration_test_standalone:
  extends: .parallel
  stage: stage2
  needs:
    - rpm_build
  script:
    - *pcsd_integration_test
    - export PCS_WUI_TEST_TYPE="standalone"
    - export PCSD_PORT_1=2224
    - make ci-cluster-test
  artifacts:
    when: on_failure
    paths:
      - .test-records/
    exclude:
      - node_modules/
      - .npmrc
    expire_in: 1 week

pcsd_integration_test_cockpit:
  extends: .parallel
  stage: stage2
  needs:
    - rpm_build
  script:
    - *pcsd_integration_test
    - dnf install -y cockpit-bridge
    - systemctl enable cockpit --now
    - usermod --shell /bin/bash "$PCSD_USERNAME_1"
    - export PCS_WUI_TEST_TYPE="cockpit"
    - export PCSD_PORT_1=9090
    - make ci-cluster-test
  artifacts:
    when: on_failure
    paths:
      - .test-records/
    exclude:
      - node_modules/
      - .npmrc
    expire_in: 1 week
