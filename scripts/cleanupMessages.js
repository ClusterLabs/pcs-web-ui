const syntaxErrorLabel = "Syntax error:";

const isLikelyASyntaxError = message =>
  message.indexOf(syntaxErrorLabel) !== -1;

const extractMessage = compilationMessage => {
  if (typeof compilationMessage === "string") {
    return compilationMessage;
  }
  if ("message" in compilationMessage) {
    return compilationMessage["message"];
  }
  if (Array.isArray(compilationMessage)) {
    return compilationMessage.find(m => "message" in m)?.message ?? "";
  }
  return "";
};

// https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
const isWebpackAddedHeader = line => /Module [A-z ]+\(from/.test(line);

const transformParsingToSyntaxError = line => {
  const parsingErr = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);
  if (!parsingErr) {
    return line;
  }
  const [, lineNumber, column, message] = parsingErr;
  return `${syntaxErrorLabel} ${message} (${lineNumber}:${column})`;
};

const syntaxError = [
  /SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, //(commonly found in CSS)
  `${syntaxErrorLabel} $3 ($1:$2)\n`,
];
const exportNotFound = [
  /^.*export '(.+?)' was not found in '(.+?)'.*$/gm,
  "Attempted import error: '$1' is not exported from '$2'.",
];
const defaultExportNotFound = [
  /^.*export 'default' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm,
  "Attempted import error: '$2' does not contain a default export (imported as '$1').",
];
const importedExportNotFound = [
  /^.*export '(.+?)' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm,
  "Attempted import error: '$1' is not exported from '$3' (imported as '$2').",
];
const internalStacks = [
  // Internal stacks are generally useless so we strip them... with the
  // exception of stacks containing `webpack:` because they're normally
  // from user code generated by webpack. For more information see
  // https://github.com/facebook/create-react-app/pull/1050
  /^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, // at ... ...:x:y
  "",
];
const anonymous = [/^\s*at\s<anonymous>(\n|$)/gm, ""]; // at <anonymous>

// can be huge after emptying internalStacks
const removeDuplicatedNewLines = (line, index, arr) =>
  index === 0 || line.trim() !== "" || line.trim() !== arr[index - 1].trim();

const cleanupCompilationMessage = compilationMessage =>
  extractMessage(compilationMessage)
    .split("\n")
    .filter(l => !isWebpackAddedHeader(l))
    .map(l => transformParsingToSyntaxError(l))
    .join("\n")
    .replace(...syntaxError)
    .replace(...exportNotFound)
    .replace(...defaultExportNotFound)
    .replace(...importedExportNotFound)
    .replace(...internalStacks)
    .replace(...anonymous)
    // TODO try to filter internalStacks and anonymous instead of replacing
    // them by "" and elimitate folloving split/filter/join
    .split("\n")
    .filter(removeDuplicatedNewLines)
    .join("\n")
    .trim();

const cleanupMessages = ({errors, warnings}) => {
  const result = {
    errors: errors.map(cleanupCompilationMessage),
    warnings: (warnings || []).map(cleanupCompilationMessage),
  };
  if (result.errors.some(isLikelyASyntaxError)) {
    result.errors = result.errors.filter(isLikelyASyntaxError);
  }
  return result;
};

module.exports = cleanupMessages;
